//package main
//
//import (
//	"bytes"
//	"database/sql"
//	"fmt"
//	_ "github.com/jinzhu/gorm/dialects/mysql"
//	"github.com/jinzhu/inflection"
//	"github.com/serenize/snaker"
//	"github.com/smallnest/gen/dbmeta"
//	gtmpl "github.com/smallnest/gen/template"
//	"go/format"
//	"io/ioutil"
//	"os"
//	"path/filepath"
//	"strings"
//	"text/template"
//)
//
//var (
//	sqlType     = "mysql"
//	sqlConnStr  = "root:123456@tcp(127.0.0.1:3306)/tagtalk?"
//	sqlTable    = "user"
//
//	packageName = ""
//
//	jsonAnnotation = false
//	gormAnnotation = true
//	gureguTypes    = false
//	rest = false
//)
//
//func main() {
//
//	//driverSource := "root:123456@tcp(127.0.0.1:3306)/drfinder?"
//	var db, err = sql.Open(sqlType, sqlConnStr)
//	if err != nil {
//		fmt.Println("Error in open database: " + err.Error())
//		return
//	}
//	defer db.Close()
//
//	// parse or read tables
//	var tables []string
//	tables = strings.Split(sqlTable, ",")
//
//	os.Mkdir("model", 0777)
//
//	t, err := getTemplate(gtmpl.ModelTmpl)
//	if err != nil {
//		fmt.Println("Error in loading model template: " + err.Error())
//		return
//	}
//
//	_, err = getTemplate(gtmpl.ControllerTmpl)
//	if err != nil {
//		fmt.Println("Error in loading controller template: " + err.Error())
//		return
//	}
//
//	var structNames []string
//
//	// generate go files for each table
//	for _, tableName := range tables {
//		structName := dbmeta.FmtFieldName(tableName)
//		structName = inflection.Singular(structName)
//		structNames = append(structNames, structName)
//
//		modelInfo := dbmeta.GenerateStruct(db, tableName, structName, "model", jsonAnnotation, gormAnnotation, gureguTypes)
//
//		var buf bytes.Buffer
//		err = t.Execute(&buf, modelInfo)
//		if err != nil {
//			fmt.Println("Error in rendering model: " + err.Error())
//			return
//		}
//		data, err := format.Source(buf.Bytes())
//		if err != nil {
//			fmt.Println("Error in formating source: " + err.Error())
//			return
//		}
//		ioutil.WriteFile(filepath.Join("model", inflection.Singular(tableName)+".go"), data, 0777)
//
//	}
//
//}
//
//func getTemplate(t string) (*template.Template, error) {
//	var funcMap = template.FuncMap{
//		"pluralize":        inflection.Plural,
//		"title":            strings.Title,
//		"toLower":          strings.ToLower,
//		"toLowerCamelCase": camelToLowerCamel,
//		"toSnakeCase":      snaker.CamelToSnake,
//	}
//
//	tmpl, err := template.New("model").Funcs(funcMap).Parse(t)
//
//	if err != nil {
//		return nil, err
//	}
//
//	return tmpl, nil
//}
//
//func camelToLowerCamel(s string) string {
//	ss := strings.Split(s, "")
//	ss[0] = strings.ToLower(ss[0])
//
//	return strings.Join(ss, "")
//}